// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // select write memory
    DMux(in=load, sel=address[5], a=a, b=b);
    DMux4Way(in=a, sel[0]=address[3], sel[1]=address[4], a=l0, b=l1, c=l2, d=l3);
    DMux4Way(in=b, sel[0]=address[3], sel[1]=address[4], a=l4, b=l5, c=l6, d=l7);

    // select read memory
    Mux4Way16(a=o0, b=o1, c=o2, d=o3, sel[1]=address[4], sel[0]=address[3], out=c);
    Mux4Way16(a=o4, b=o5, c=o6, d=o7, sel[1]=address[4], sel[0]=address[3], out=d);
    Mux16(a=c, b=d, sel=address[5], out=out);

    RAM8(in=in, load=l0, address=address[0..2], out=o0);
    RAM8(in=in, load=l1, address=address[0..2], out=o1);
    RAM8(in=in, load=l2, address=address[0..2], out=o2);
    RAM8(in=in, load=l3, address=address[0..2], out=o3);
    RAM8(in=in, load=l4, address=address[0..2], out=o4);
    RAM8(in=in, load=l5, address=address[0..2], out=o5);
    RAM8(in=in, load=l6, address=address[0..2], out=o6);
    RAM8(in=in, load=l7, address=address[0..2], out=o7);
}